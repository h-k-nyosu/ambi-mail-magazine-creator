import type { inferRouterOutputs } from "@trpc/server";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { FaArrowDown, FaArrowUp, FaTrash } from "react-icons/fa";
import { RiAiGenerate } from "react-icons/ri";
import type { AppRouter } from "~/server/api/root";
import { api } from "~/utils/api";

type RouterOutput = inferRouterOutputs<AppRouter>;

type JobData = RouterOutput["job"]["fetchData"];

export default function Home() {
  const [url, setUrl] = useState("");
  const [jobs, setJobs] = useState<JobData[]>([]);
  const router = useRouter();

  const jobQuery = api.job.fetchData.useQuery({ url }, { enabled: !!url });
  const createContentMutation = api.job.createContent.useMutation({
    onSuccess: () => {
      // ミューテーションが成功したら、content/resultページに遷移
      router.push("/content/result");
    },
  });

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const baseUrl = url.split("?")[0] as string;
    const urlPattern = /^https:\/\/en-ambi\.com\/job\/j-\d+\/$/;
    if (!urlPattern.test(baseUrl)) {
      alert(
        "URLが間違っているようです。\n" +
          "AMBIの求人詳細ページURLを入力してください。\n" +
          "※URL形式: https://en-ambi.com/job/j-xxxxxxx/",
      );
      return;
    }
    if (jobs.find((job) => job.url === baseUrl)) {
      alert("すでに追加されています");
      return;
    }
    if (jobQuery.data) {
      setJobs([...jobs, { ...jobQuery.data, url: baseUrl }]);
      setUrl("");
    }
  };

  const handleCreate = () => {
    // jobsをcreateContentに渡す
    createContentMutation.mutate(jobs);
  };

  const handleDelete = (index: number) => {
    const newJobs = [...jobs];
    newJobs.splice(index, 1);
    setJobs(newJobs);
  };

  const handleMove = (index: number, direction: number) => {
    if (index + direction < 0 || index + direction >= jobs.length) {
      return;
    }
    const newJobs = [...jobs];
    const temp = newJobs[index];
    const targetJob = newJobs[index + direction];

    if (!temp || !targetJob) {
      return;
    }

    newJobs[index] = targetJob;
    newJobs[index + direction] = temp;
    setJobs(newJobs);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative min-h-screen bg-gray-100 pb-12">
        <div className="absolute left-0 right-0 top-16 flex flex-col items-center">
          <div className="mb-4 w-full max-w-2xl text-center text-gray-700">
            <p>求人原稿から訴求内容を抜き出し、文章を整えて生成します。</p>
            <p>
              メルマガに載せる求人URLを追加し、すべて追加したら右下の「作成」を押してください。
            </p>
          </div>
          <form onSubmit={handleSubmit} className="mb-4 mt-4 w-full max-w-xl">
            <div className="flex items-center border-b border-b-2 border-blue-500 py-2">
              <input
                type="text"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="mr-3 w-full appearance-none border-none bg-transparent px-2 py-1 leading-tight text-gray-700 focus:outline-none"
                placeholder="URLを入力してください"
              />
              <button
                type="submit"
                className="flex-shrink-0 rounded border-4 border-blue-500 bg-blue-500 px-2 py-1 text-sm text-white hover:border-blue-700 hover:bg-blue-700"
              >
                Enter ⏎
              </button>
            </div>
          </form>
        </div>
        <div className="container m-auto flex flex-col items-center px-4 pt-72">
          <div className="flex flex-wrap justify-center gap-4">
            {jobs.map((job, index) => (
              <div
                key={index}
                className="card mb-2 w-80 rounded bg-white p-4 shadow-lg sm:w-80 md:w-80 lg:w-80 xl:w-80"
              >
                <div className="flex items-center justify-between">
                  <h2 className="text-2xl font-bold">{index + 1}</h2>
                  <div className="space-x-2">
                    <button
                      onClick={() => handleMove(index, -1)}
                      disabled={index === 0}
                    >
                      <FaArrowUp color={index === 0 ? "gray" : "blue"} />
                    </button>
                    <button
                      onClick={() => handleMove(index, 1)}
                      disabled={index === jobs.length - 1}
                    >
                      <FaArrowDown
                        color={index === jobs.length - 1 ? "gray" : "blue"}
                      />
                    </button>
                    <button onClick={() => handleDelete(index)}>
                      <FaTrash color="red" />
                    </button>
                  </div>
                </div>
                <p className="mt-2 font-bold">{job.companyName}</p>
                <p>{job.jobTitle}</p>
                <p>年収：{job.jobIncome}</p>
                <p className="overflow-hidden overflow-ellipsis whitespace-nowrap break-all">
                  <a
                    href={job.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-500 hover:underline"
                  >
                    {job.url}
                  </a>
                </p>
              </div>
            ))}
          </div>
        </div>
        <div className="fixed bottom-20 right-20 z-50">
          <button
            onClick={handleCreate} // 作成ボタンのクリックハンドラを設定
            className={`flex h-16 w-28 items-center justify-center rounded-lg font-bold text-white ${
              jobs.length === 0
                ? "cursor-not-allowed bg-gray-500"
                : "bg-blue-500 hover:bg-blue-700"
            }`}
            disabled={jobs.length === 0}
          >
            <RiAiGenerate size={24} />
            <span className="px-1"></span>作成
          </button>
        </div>
        {createContentMutation.isLoading && (
          <div
            style={{
              position: "fixed",
              top: 0,
              left: 0,
              width: "100%",
              height: "100%",
              backgroundColor: "rgba(0, 0, 0, 0.8)",
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              zIndex: 9999,
            }}
          >
            <span style={{ color: "white", fontSize: "2em" }}>
              ローディング...
            </span>
          </div>
        )}
      </main>
    </>
  );
}
